// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pokemon.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const addPokemon = `-- name: AddPokemon :one
INSERT INTO pokemon (id, pokemon_name, json_data)
VALUES ($1, $2, $3)
RETURNING id, pokemon_name, caught_at, json_data
`

type AddPokemonParams struct {
	ID          uuid.UUID
	PokemonName string
	JsonData    pqtype.NullRawMessage
}

func (q *Queries) AddPokemon(ctx context.Context, arg AddPokemonParams) (Pokemon, error) {
	row := q.db.QueryRowContext(ctx, addPokemon, arg.ID, arg.PokemonName, arg.JsonData)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.PokemonName,
		&i.CaughtAt,
		&i.JsonData,
	)
	return i, err
}

const getPokemonByName = `-- name: GetPokemonByName :one
SELECT id, pokemon_name, caught_at, json_data FROM pokemon
WHERE pokemon_name = $1
LIMIT 1
`

func (q *Queries) GetPokemonByName(ctx context.Context, pokemonName string) (Pokemon, error) {
	row := q.db.QueryRowContext(ctx, getPokemonByName, pokemonName)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.PokemonName,
		&i.CaughtAt,
		&i.JsonData,
	)
	return i, err
}

const listPokemon = `-- name: ListPokemon :many
SELECT id, pokemon_name, caught_at, json_data FROM pokemon
ORDER BY caught_at DESC
`

func (q *Queries) ListPokemon(ctx context.Context) ([]Pokemon, error) {
	rows, err := q.db.QueryContext(ctx, listPokemon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pokemon
	for rows.Next() {
		var i Pokemon
		if err := rows.Scan(
			&i.ID,
			&i.PokemonName,
			&i.CaughtAt,
			&i.JsonData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
